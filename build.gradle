buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "nallar"
			url = "http://repo.nallar.me/"
		}
	}
	configurations.all { resolutionStrategy.cacheChangingModulesFor 30, 'seconds' }
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
		classpath group: 'me.nallar', name: 'ModPatcherGradle', version: '0.1-SNAPSHOT', changing: true
	}
}
apply plugin: 'me.nallar.ModPatcherGradle'
apply plugin: 'maven'

group = 'me.nallar'
archivesBaseName = 'TickThreading'

// Extended project information
ext.projectName = 'TickThreading'
ext.inceptionYear = '2014'
ext.packaging = 'jar'
ext.url = 'http://nallar.me/minecraft'
ext.description = 'Mod Patcher'
ext.organization = 'nallar.me'
ext.mcVersion = '1.8.9'
ext.forgeVersion = "11.15.0.1683"
ext.fullForgeVersion = mcVersion + "-" + forgeVersion

minecraft {
	version = fullForgeVersion
	mappings = "stable_20"

	replace "@VERSION@", project.version
	replace "@MC_VERSION@", version
}

modpatcher {
	mixinPackage = "nallar.mixin"
	extractGeneratedSources = true
	generateInheritanceHierarchy = true
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
defaultTasks "setupCiWorkspace", "build"

version = mcVersion + '-SNAPSHOT'

// Define variables
ext.buildNumber = System.getenv("BUILD_NUMBER") ?: 0
ext.ciSystem = System.getenv("JENKINS_URL") ? 'Jenkins' : 'unknown'
ext.commit = System.getenv("GIT_COMMIT") ?: 'unknown'

repositories {
	jcenter()
	maven { url 'http://repo.nallar.me/' }
}

configurations {
	all { resolutionStrategy.cacheChangingModulesFor 30, 'seconds' }
	provided
	compile.extendsFrom provided
}

dependencies {
	compile group: 'me.nallar', name: 'modpatcher', version: '1.8.9-SNAPSHOT', changing: true
	provided "me.nallar:Mixin:1.0-SNAPSHOT"
}

if (System.env.GRADLE_USER_HOME) {
	ext.homeDir = System.env.GRADLE_USER_HOME + '/'
} else {
	ext.homeDir = System.properties['user.home'] + '/.gradle/'
}
ext.mappingsPath = homeDir + 'caches/minecraft/net/minecraftforge/forge/' + fullForgeVersion + '/unpacked/conf/'

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from((configurations.runtime - configurations.provided).filter { it.exists() }.collect {
		it.isDirectory() ? it : zipTree(it)
	}) {
		exclude "META-INF/**"
	}
	from mappingsPath + 'packaged.srg'
	from mappingsPath + 'methods.csv'
	from mappingsPath + 'fields.csv'
	from './generated/extendsMap.obj'
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version': project.version, 'mcversion': project.minecraft.version, 'name': project.projectName
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) { exclude 'mcmod.info' }
}

// Source compiler configuration
tasks.withType(JavaCompile) {
	sourceCompatibility = 8
	targetCompatibility = 8
	options.with {
		deprecation = true
		encoding = 'UTF-8'
		compilerArgs <<
			"-XDignore.symbol.file=true" <<
			"-Xlint:all" <<
			"-Xlint:-path" <<
			"-Xlint:-processing"
		fork = true
		forkOptions.executable = 'javac'
	}
}

jar.manifest.mainAttributes(
	"Built-By": System.properties['user.name'],
	"Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
	"Implementation-Title": name,
	"Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
	"Implementation-Vendor": url,
	"FMLCorePlugin": "nallar.tickthreading.CoreMod"
)
